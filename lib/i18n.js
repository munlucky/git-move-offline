const { loadConfig } = require('./config');

const messages = {
  en: {
    selectLanguage: 'Please select a language:',
    languageSet: 'Language set to English.\n',
    configNotFound:
      'Configuration file not found. Please run the configuration first.',
    usage: 'Usage: node export.js /path/to/your/repo [branch_name]',
    repoPathRequired: 'Repository path is required.',
    exporting: 'Exporting git repository...\n',
    readingRefs: 'Reading refs and commits...\n',
    foundCommits: 'Found %s commits.',
    packing: 'Packing %s objects...\n',
    writingPack: 'Writing pack file and index...\n',
    compressing: 'Compressing repository...\n',
    exportFinished: 'Export finished: %s\n',
    importing: 'Importing git repository...\n',
    usageImport: 'Usage: node import.js /path/to/your/repo.zip',
    zipPathRequired: 'Zip file path is required.',
    extracting: 'Extracting repository...\n',
    repoExtracted: 'Repository extracted to: %s\n',
    fetching: 'Fetching objects from pack file...\n',
    importFinished: 'Import finished.\n',
    toolDescription:
      'Git Move Offline (gitmv) - A tool for offline moving and synchronization of Git repositories',
    usageTitle: 'Usage:',
    exportCommand: 'Export current repository to ZIP',
    importCommand: 'Import repository from ZIP',
    optionsTitle: 'Options:',
    helpOption: 'Show this help message',
    versionOption: 'Show version',
    langOption: 'Set language (en, ko)',
    examplesTitle: 'Examples:',
    moreInfoTitle: 'More info:',
    exportOptions: 'export options: gitmv export --help',
    importOptions: 'import options: gitmv import --help',
    unknownCommand: 'Unknown command: %s\n',
    error: 'Error:',
    exportTitle: '=== Git Export Tool ===\n',
    checkGitRepo: 'Checking Git repository',
    notGitRepo:
      'Not a Git repository. Please run this in a Git project directory.',
    uncommittedChanges:
      'You have uncommitted changes. These will not be included in the export.',
    continueAnyway: 'Continue anyway?',
    exportCancelled: 'Export cancelled.',
    collectingMeta: 'Collecting repository metadata',
    repoInfo: '\nRepository Information:',
    currentBranch: '  Current Branch: %s',
    totalBranches: '  Total Branches: %s',
    totalTags: '  Total Tags: %s',
    branches: '\nBranches:',
    proceedWithExport: '\nProceed with export?',
    creatingBundle: 'Creating Git bundle (this may take a while)',
    verifyingBundle: 'Verifying bundle integrity',
    bundleFailed: 'Bundle verification failed',
    bundleSize: '  Bundle size: %s',
    creatingZip: 'Creating ZIP archive',
    zipSize: '  ZIP size: %s',
    cleaningUp: 'Cleaning up temporary files',
    exportComplete: 'Export Complete!',
    file: 'File: %s',
    size: 'Size: %s',
    location: 'Location: %s',
    nextSteps: 'Next steps:',
    copyZip: '1. Copy this ZIP file to your offline environment',
    runImport: '2. Run: gitmv import <zip-file-path>',
    branchNotFound: "Branch '%s' not found.",
    noBranches: 'No local branches found in this repository.',
    selectBranchToExport: 'Select a branch to export',
    allBranches: 'All branches',
    exportingNBranches: 'Exporting %s branch(es).',
    exportingBranch: 'Exporting branch: %s',
    exportingAllBranches: 'Exporting all %s branches.',
    exportingAllBranchesAuto: 'Auto-exporting all %s branches in auto mode.',
    // Import-specific messages
    importTitle: '=== Git Import Tool ===\n',
    importUsage: 'Usage: gitmv import <zip-file-path> [options]',
    autoOption: 'Run in non-interactive mode',
    dryRunOption: 'Simulate import without making changes',
    importExample1: 'gitmv import repo.zip',
    importExample2: 'gitmv import repo.zip --init',
    importExample3: 'gitmv import repo.zip --branch main,develop',
    dryRunMode: 'DRY RUN MODE: No changes will be made',
    zipNotFound: 'ZIP file not found: %s',
    notGitRepoImport: 'Not a Git repository. Please run this in a Git project directory.',
    emptyRepo: 'Empty Repository Detected',
    noCommits: 'This repository has no commits yet.',
    useInitMode: 'Use init mode to initialize from bundle?',
    autoInitMode: 'Auto-selecting init mode for empty repository.',
    initModeInfo: 'INIT MODE: Creating branches directly from bundle',
    syncModeInfo: 'SYNC MODE: Merging changes into existing branches',
    uncommittedChangesImport: 'You have uncommitted changes. Please commit or stash them first.',
    currentBranchImport: 'Current branch: %s',
    extractingZip: 'Extracting ZIP file',
    invalidExportFile: 'Invalid export file: metadata.json not found',
    exportedRepoInfo: '\nExported Repository Information:',
    exportDate: '  Export Date: %s',
    originalBranch: '  Original Branch: %s',
    verifyingBundleImport: 'Verifying bundle',
    addingRemote: 'Adding remote: %s',
    fetchingCommits: 'Fetching commits',
    filteredBranches: 'Filtered to branches: %s',
    selectBranches: 'Select branches to import',
    noBranchesSelected: 'No branches selected.',
    branchesToMerge: 'Branches to process: %s',
    processingBranch: '\nProcessing branch: %s',
    latestCommit: '  Latest commit: %s',
    message: '  Message: %s',
    author: '  Author: %s',
    createdBranch: 'Created branch: %s',
    wouldCreateBranch: '[DRY RUN] Would create branch: %s',
    branchExists: 'Branch "%s" does not exist locally. What would you like to do?',
    createAndCheckout: 'Create and checkout',
    skip: 'Skip',
    skipped: 'Skipped: %s',
    createdAndCheckedOut: 'Created and checked out branch: %s',
    wouldCreateAndCheckout: '[DRY RUN] Would create and checkout branch: %s',
    confirmMerge: 'Merge %s into %s?',
    wouldCheckout: '[DRY RUN] Would checkout branch: %s',
    mergedSuccessfully: 'Merged successfully.',
    mergeConflict: 'Merge conflict in branch: %s',
    conflictedFiles: '  Conflicted files:',
    resolveConflicts: 'Please resolve conflicts:',
    resolveStep1: '  1. Edit conflicted files',
    resolveStep2: '  2. git add <resolved-files>',
    resolveStep3: '  3. git commit',
    resolveStep4: '  4. After resolving, cleanup: rm -rf .git-import-temp && git remote remove git-import-temp',
    conflictKeepResources: 'Note: Remote and temporary files are preserved for conflict resolution.',
    cleaningPreviousImport: 'Cleaning up resources from previous import',
    wouldMerge: '[DRY RUN] Would merge %s into %s',
    mergeSummary: '\nMerge Summary:',
    branchColumn: 'Branch',
    statusColumn: 'Status',
    conflictsColumn: 'Conflicts',
    remoteUrl: 'Remote URL: %s',
    confirmPush: 'Push changes to remote?',
    pushing: 'Pushing to remote',
    pushedSuccessfully: 'Pushed successfully.',
    notPushed: 'Changes not pushed. You can push manually later.',
    noOrigin: 'No origin remote configured.',
    cleaningUpImport: 'Cleaning up',
    dryRunComplete: 'Dry Run Complete',
    noChangesMade: 'No changes were made.',
    reviewActions: 'Review the actions that would be performed.',
    importComplete: 'Import Complete!',
    mergedBranches: 'Merged branches: %s',
    createdBranches: 'Created branches: %s',
    repoUpdated: 'Repository has been updated.',
    useBranchMapping: 'Do you want to map branches to different targets?',
    branchMappingMode: 'Branch Mapping Mode - Select target branch for each source branch',
    selectTargetBranch: 'Select target branch for \'%s\'',
    sameNameBranch: '%s (same name)',
    enterNewBranchName: 'Enter new branch name',
    newBranchNamePrompt: 'New branch name: ',
    branchMappingSummary: '\nBranch Mapping Summary:',
    mapping: '  %s → %s',
    targetBranchNotExist: 'Target branch \'%s\' does not exist. It will be created.',
    mergingInto: 'Merging %s into %s',
    allowUnrelatedOption: 'Allow merging branches with unrelated histories',
    allowUnrelatedHistories: 'The branches have unrelated histories. Allow merge anyway?',
    unrelatedHistoriesNote: 'Note: Merging unrelated histories (common in offline sync scenarios)',
  },
  ko: {
    selectLanguage: '언어를 선택하세요:',
    languageSet: '언어가 한국어로 설정되었습니다.\n',
    configNotFound: '설정 파일을 찾을 수 없습니다. 먼저 설정을 실행하세요.',
    usage: '사용법: node export.js /path/to/your/repo [branch_name]',
    repoPathRequired: '저장소 경로가 필요합니다.',
    exporting: 'Git 저장소를 내보내는 중...\n',
    readingRefs: 'Ref 및 커밋 읽는 중...\n',
    foundCommits: '커밋 %s개를 찾았습니다.',
    packing: '오브젝트 %s개를 압축하는 중...\n',
    writingPack: '팩 파일과 인덱스를 쓰는 중...\n',
    compressing: '저장소를 압축하는 중...\n',
    exportFinished: '내보내기 완료: %s\n',
    importing: 'Git 저장소를 가져오는 중...\n',
    usageImport: '사용법: node import.js /path/to/your/repo.zip',
    zipPathRequired: 'Zip 파일 경로가 필요합니다.',
    extracting: '저장소 압축 해제 중...\n',
    repoExtracted: '저장소가 다음 위치에 압축 해제되었습니다: %s\n',
    fetching: '팩 파일에서 오브젝트를 가져오는 중...\n',
    importFinished: '가져오기 완료.\n',
    toolDescription: 'Git Move Offline (gitmv) - Git 저장소 오프라인 이동 도구',
    usageTitle: '사용법:',
    exportCommand: '현재 저장소를 ZIP으로 내보내기',
    importCommand: 'ZIP에서 저장소 가져오기',
    optionsTitle: '옵션:',
    helpOption: '도움말 메시지 표시',
    versionOption: '버전 표시',
    langOption: '언어 설정 (en, ko)',
    examplesTitle: '예시:',
    moreInfoTitle: '더 많은 정보:',
    exportOptions: 'export 옵션: gitmv export --help',
    importOptions: 'import 옵션: gitmv import --help',
    unknownCommand: '알 수 없는 명령어: %s\n',
    error: '오류:',
    exportTitle: '=== Git 내보내기 도구 ===\n',
    checkGitRepo: 'Git 저장소 확인 중',
    notGitRepo: 'Git 저장소가 아닙니다. Git 프로젝트 디렉토리에서 실행하세요.',
    uncommittedChanges:
      '커밋되지 않은 변경 사항이 있습니다. 내보내기에 포함되지 않습니다.',
    continueAnyway: '계속하시겠습니까?',
    exportCancelled: '내보내기가 취소되었습니다.',
    collectingMeta: '저장소 메타데이터 수집 중',
    repoInfo: '\n저장소 정보:',
    currentBranch: '  현재 브랜치: %s',
    totalBranches: '  총 브랜치: %s',
    totalTags: '  총 태그: %s',
    branches: '\n브랜치:',
    proceedWithExport: '\n내보내기를 진행하시겠습니까?',
    creatingBundle: 'Git 번들 생성 중 (시간이 걸릴 수 있습니다)',
    verifyingBundle: '번들 무결성 확인 중',
    bundleFailed: '번들 확인 실패',
    bundleSize: '  번들 크기: %s',
    creatingZip: 'ZIP 아카이브 생성 중',
    zipSize: '  ZIP 크기: %s',
    cleaningUp: '임시 파일 정리 중',
    exportComplete: '내보내기 완료!',
    file: '파일: %s',
    size: '크기: %s',
    location: '위치: %s',
    nextSteps: '다음 단계:',
    copyZip: '1. 이 ZIP 파일을 오프라인 환경으로 복사하세요',
    runImport: '2. 다음을 실행하세요: gitmv import <zip-file-path>',
    branchNotFound: "브랜치 '%s'를 찾을 수 없습니다.",
    noBranches: '이 저장소에 로컬 브랜치가 없습니다.',
    selectBranchToExport: '내보낼 브랜치를 선택하세요',
    allBranches: '모든 브랜치',
    exportingNBranches: '%s개의 브랜치를 내보냅니다.',
    exportingBranch: '브랜치 내보내는 중: %s',
    exportingAllBranches: '%s개의 모든 브랜치를 내보냅니다.',
    exportingAllBranchesAuto: '자동 모드에서 %s개의 모든 브랜치를 내보냅니다.',
    exportOptionsTitle: '내보내기 옵션:',
    importOptionsTitle: '가져오기 옵션:',
    exportBranchOption: '특정 브랜치만 내보내기',
    exportAllOption: '모든 로컬 브랜치 내보내기',
    autoOptionDesc: '비대화형 모드로 실행',
    initOption: '번들로부터 새 저장소 초기화',
    branchOption: '가져올 브랜치 지정 (쉼표로 구분)',
    dryRunOption: '변경사항 없이 가져오기 시뮬레이션',
    // Import-specific messages
    importTitle: '=== Git 가져오기 도구 ===\n',
    importUsage: '사용법: gitmv import <zip-file-path> [옵션]',
    autoOption: '비대화형 모드로 실행',
    importExample1: 'gitmv import repo.zip',
    importExample2: 'gitmv import repo.zip --init',
    importExample3: 'gitmv import repo.zip --branch main,develop',
    dryRunMode: '드라이 런 모드: 변경사항이 적용되지 않습니다',
    zipNotFound: 'ZIP 파일을 찾을 수 없습니다: %s',
    notGitRepoImport: 'Git 저장소가 아닙니다. Git 프로젝트 디렉토리에서 실행하세요.',
    emptyRepo: '빈 저장소 감지됨',
    noCommits: '이 저장소에는 아직 커밋이 없습니다.',
    useInitMode: '번들로부터 초기화하기 위해 init 모드를 사용하시겠습니까?',
    autoInitMode: '빈 저장소에 대해 자동으로 init 모드를 선택합니다.',
    initModeInfo: 'INIT 모드: 번들에서 브랜치를 직접 생성',
    syncModeInfo: 'SYNC 모드: 기존 브랜치에 변경사항 병합',
    uncommittedChangesImport: '커밋되지 않은 변경사항이 있습니다. 먼저 커밋하거나 스태시하세요.',
    currentBranchImport: '현재 브랜치: %s',
    extractingZip: 'ZIP 파일 압축 해제 중',
    invalidExportFile: '잘못된 내보내기 파일: metadata.json을 찾을 수 없습니다',
    exportedRepoInfo: '\n내보낸 저장소 정보:',
    exportDate: '  내보내기 날짜: %s',
    originalBranch: '  원본 브랜치: %s',
    verifyingBundleImport: '번들 확인 중',
    addingRemote: '리모트 추가 중: %s',
    fetchingCommits: '커밋 가져오는 중',
    filteredBranches: '다음 브랜치로 필터링됨: %s',
    selectBranches: '가져올 브랜치를 선택하세요',
    noBranchesSelected: '선택된 브랜치가 없습니다.',
    branchesToMerge: '처리할 브랜치: %s',
    processingBranch: '\n브랜치 처리 중: %s',
    latestCommit: '  최근 커밋: %s',
    message: '  메시지: %s',
    author: '  작성자: %s',
    createdBranch: '브랜치 생성됨: %s',
    wouldCreateBranch: '[드라이 런] 브랜치를 생성할 것입니다: %s',
    branchExists: '브랜치 "%s"가 로컬에 존재하지 않습니다. 어떻게 하시겠습니까?',
    createAndCheckout: '생성하고 체크아웃',
    skip: '건너뛰기',
    skipped: '건너뜀: %s',
    createdAndCheckedOut: '브랜치를 생성하고 체크아웃했습니다: %s',
    wouldCreateAndCheckout: '[드라이 런] 브랜치를 생성하고 체크아웃할 것입니다: %s',
    confirmMerge: '%s를 %s에 병합하시겠습니까?',
    wouldCheckout: '[드라이 런] 브랜치를 체크아웃할 것입니다: %s',
    mergedSuccessfully: '성공적으로 병합되었습니다.',
    mergeConflict: '브랜치에서 병합 충돌 발생: %s',
    conflictedFiles: '  충돌 파일:',
    resolveConflicts: '충돌을 해결해주세요:',
    resolveStep1: '  1. 충돌 파일 편집',
    resolveStep2: '  2. git add <해결된-파일>',
    resolveStep3: '  3. git commit',
    resolveStep4: '  4. 해결 후 정리: rm -rf .git-import-temp && git remote remove git-import-temp',
    conflictKeepResources: '참고: 충돌 해결을 위해 리모트와 임시 파일이 유지됩니다.',
    cleaningPreviousImport: '이전 import 리소스 정리 중',
    wouldMerge: '[드라이 런] %s를 %s에 병합할 것입니다',
    mergeSummary: '\n병합 요약:',
    branchColumn: '브랜치',
    statusColumn: '상태',
    conflictsColumn: '충돌',
    remoteUrl: '리모트 URL: %s',
    confirmPush: '리모트에 푸시하시겠습니까?',
    pushing: '리모트에 푸시 중',
    pushedSuccessfully: '성공적으로 푸시되었습니다.',
    notPushed: '변경사항이 푸시되지 않았습니다. 나중에 수동으로 푸시할 수 있습니다.',
    noOrigin: 'origin 리모트가 설정되지 않았습니다.',
    cleaningUpImport: '정리 중',
    dryRunComplete: '드라이 런 완료',
    noChangesMade: '변경사항이 적용되지 않았습니다.',
    reviewActions: '수행될 작업을 검토하세요.',
    importComplete: '가져오기 완료!',
    mergedBranches: '병합된 브랜치: %s',
    createdBranches: '생성된 브랜치: %s',
    repoUpdated: '저장소가 업데이트되었습니다.',
    useBranchMapping: '브랜치를 다른 타겟에 매핑하시겠습니까?',
    branchMappingMode: '브랜치 매핑 모드 - 각 소스 브랜치의 타겟 브랜치를 선택하세요',
    selectTargetBranch: '\'%s\'의 타겟 브랜치를 선택하세요',
    sameNameBranch: '%s (같은 이름)',
    enterNewBranchName: '새 브랜치 이름 입력',
    newBranchNamePrompt: '새 브랜치 이름: ',
    branchMappingSummary: '\n브랜치 매핑 요약:',
    mapping: '  %s → %s',
    targetBranchNotExist: '타겟 브랜치 \'%s\'가 존재하지 않습니다. 생성됩니다.',
    mergingInto: '%s를 %s에 병합 중',
    allowUnrelatedOption: '관계없는 히스토리를 가진 브랜치 병합 허용',
    allowUnrelatedHistories: '브랜치들이 관계없는 히스토리를 가지고 있습니다. 그래도 병합하시겠습니까?',
    unrelatedHistoriesNote: '참고: 관계없는 히스토리 병합 중 (오프라인 동기화에서 일반적)',
  },
};

let lang = 'en';

function init() {
  const config = loadConfig();
  lang = config.language || 'en';
}

function getMessage(key, ...args) {
  const message = messages[lang][key] || messages.en[key];
  if (args.length > 0) {
    return require('util').format(message, ...args);
  }
  return message;
}

init();

module.exports = {
  getMessage,
  setLanguage: (newLang) => {
    lang = newLang;
  },
};
